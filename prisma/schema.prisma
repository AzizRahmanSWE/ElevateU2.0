generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model userProfile {
  id              Int              @id @default(autoincrement())
  user_id         String           @unique 
  firstName       String?
  lastName        String?
  clerkId         String?          @unique @db.VarChar(255)
  age             Int?
  gender          String?
  heightCm        Float?
  weightKg        Float?
  profilePicUrl   String?
  fitnessLevel    String?
  medicalHistory  String?
  lifestyleHabits String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  email           String           @unique
  progressEntries Progress[]
  workoutPrograms WorkoutProgram[]
  workoutSessions WorkoutSession[]

  @@map("user_profiles")
}

model Exercise {
  id               Int               @id
  name             String
  description      String?
  muscleGroup      String?
  equipment        String?
  imageUrls        Json?
  category         String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  sessionExercises SessionExercise[]
  workoutExercises WorkoutExercise[]
}

model WorkoutProgram {
  id          String           @id @default(uuid())
  name        String
  description String?
  creatorId   Int
  isPublic    Boolean          @default(false)
  aiAnalysis  String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  workoutDays WorkoutDay[]
  creator     userProfile      @relation(fields: [creatorId], references: [id])
  sessions    WorkoutSession[] @relation("ProgramSessions")

  @@map("workout_programs")
}

model WorkoutDay {
  id          String            @id @default(uuid())
  programId   String
  dayNumber   Int
  name        String?
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  program     WorkoutProgram    @relation(fields: [programId], references: [id])
  exercises   WorkoutExercise[]
  sessions    WorkoutSession[]  @relation("DaySessions")

  @@unique([programId, dayNumber])
  @@map("workout_days")
}

model WorkoutExercise {
  id            String     @id @default(uuid())
  workoutDayId  String
  exerciseId    Int
  order         Int
  sets          Int
  reps          Int
  restPeriodSec Int?
  notes         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  exercise      Exercise   @relation(fields: [exerciseId], references: [id])
  workoutDay    WorkoutDay @relation(fields: [workoutDayId], references: [id])

  @@map("workout_exercises")
}

model WorkoutSession {
  id               String            @id @default(uuid())
  userId           Int
  programId        String?
  workoutDayId     String?
  date             DateTime          @default(now())
  notes            String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  sessionExercises SessionExercise[]
  program          WorkoutProgram?   @relation("ProgramSessions", fields: [programId], references: [id])
  user             userProfile       @relation(fields: [userId], references: [id])
  workoutDay       WorkoutDay?       @relation("DaySessions", fields: [workoutDayId], references: [id])

  @@map("workout_sessions")
}

model SessionExercise {
  id         String         @id @default(uuid())
  sessionId  String
  exerciseId Int
  order      Int
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  exercise   Exercise       @relation(fields: [exerciseId], references: [id])
  session    WorkoutSession @relation(fields: [sessionId], references: [id])
  sets       Set[]

  @@map("session_exercises")
}

model Set {
  id                String          @id @default(uuid())
  sessionExerciseId String
  setNumber         Int
  reps              Int
  weightKg          Float
  restPeriodSec     Int?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  sessionExercise   SessionExercise @relation(fields: [sessionExerciseId], references: [id])

  @@map("sets")
}

model Progress {
  id        String      @id @default(uuid())
  userId    Int
  date      DateTime    @default(now())
  weightKg  Float?
  heightCm  Float?
  notes     String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      userProfile @relation(fields: [userId], references: [id])

  @@map("progress_entries")
}